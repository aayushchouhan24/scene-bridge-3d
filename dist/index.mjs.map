{"version":3,"sources":["../src/DomObject.ts","../src/index.ts"],"names":["Scene","THREE2"],"mappings":"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","file":"index.mjs","sourcesContent":["import * as THREE from \"three\";\r\n\r\nfunction computeBox(o: THREE.Object3D): THREE.Box3 {\r\n  let hasMesh = false;\r\n  const box = new THREE.Box3();\r\n  \r\n  o.traverse((child) => {\r\n    if (child instanceof THREE.Mesh && child.geometry) {\r\n      hasMesh = true;\r\n      child.geometry.computeBoundingBox();\r\n    }\r\n  });\r\n\r\n  if (hasMesh) box.expandByObject(o);\r\n  \r\n  return box;\r\n}\r\n\r\nexport class DomObject {\r\n  private center = new THREE.Vector3();\r\n  private size = new THREE.Vector3();\r\n  private world = new THREE.Vector3();\r\n  private dir = new THREE.Vector3();\r\n  private ray = new THREE.Ray();\r\n  private plane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\r\n\r\n  private tempV1 = new THREE.Vector3(); // reuse temp vectors\r\n  private tempV2 = new THREE.Vector3();\r\n\r\n  constructor(\r\n    private node: THREE.Object3D,\r\n    private element: Element,\r\n    private camera: THREE.PerspectiveCamera\r\n  ) {\r\n    const wb = new THREE.Box3().setFromObject(node);\r\n    this.center.copy(wb.getCenter(this.tempV1));\r\n    this.size.copy(computeBox(node).getSize(this.tempV2));\r\n  }\r\n\r\n  update() {\r\n    const r = this.element.getBoundingClientRect();\r\n    const w = window.innerWidth;\r\n    const h = window.innerHeight;\r\n\r\n    const ndcX = ((r.left + r.width * 0.5) / w) * 2 - 1;\r\n    const ndcY = (-(r.top + r.height * 0.5) / h) * 2 + 1;\r\n\r\n    this.world.set(ndcX, ndcY, 0.5).unproject(this.camera);\r\n    this.dir.copy(this.world).sub(this.camera.position).normalize();\r\n    this.ray.origin.copy(this.camera.position);\r\n    this.ray.direction.copy(this.dir);\r\n    this.ray.intersectPlane(this.plane, this.node.position);\r\n\r\n    const dist = this.camera.position.distanceTo(this.node.position);\r\n    const vh = 2 * Math.tan(THREE.MathUtils.DEG2RAD * 0.5 * this.camera.fov) * dist;\r\n    const vw = vh * this.camera.aspect;\r\n\r\n    const pixelToWorldX = vw / w;\r\n    const pixelToWorldY = vh / h;\r\n\r\n    // Only update if attribute exists\r\n    const dz = this.element.hasAttribute(\"data-z\") ? parseFloat(this.element.getAttribute(\"data-z\") ?? \"0\") : 0;\r\n    const rotX = this.element.hasAttribute(\"data-rot-x\") ? THREE.MathUtils.DEG2RAD * parseFloat(this.element.getAttribute(\"data-rot-x\") ?? \"0\") : 0;\r\n    const rotY = this.element.hasAttribute(\"data-rot-y\") ? THREE.MathUtils.DEG2RAD * parseFloat(this.element.getAttribute(\"data-rot-y\") ?? \"0\") : 0;\r\n    const rotZ = this.element.hasAttribute(\"data-rot-z\") ? THREE.MathUtils.DEG2RAD * parseFloat(this.element.getAttribute(\"data-rot-z\") ?? \"0\") : 0;\r\n\r\n    // Update Z only if attribute is present\r\n    if (this.element.hasAttribute(\"data-z\")) this.node.position.z += dz * pixelToWorldY;\r\n\r\n    const sx = (r.width * pixelToWorldX) / this.size.x;\r\n    const sy = (r.height * pixelToWorldY) / this.size.y;\r\n    const s = Math.min(sx, sy);\r\n\r\n    this.node.scale.set(s, s, (s * this.size.z) / this.size.y);\r\n\r\n    this.node.position.x -= this.center.x * s;\r\n    this.node.position.y -= this.center.y * s;\r\n    this.node.position.z -= this.center.z * s;\r\n\r\n    if (this.element.hasAttribute(\"data-rot-x\") || this.element.hasAttribute(\"data-rot-y\") || this.element.hasAttribute(\"data-rot-z\"))\r\n      this.node.rotation.set(rotX, rotY, rotZ);\r\n\r\n  }\r\n}\r\n","import * as THREE from \"three\";\r\nimport { DomObject } from \"./DomObject\";\r\n\r\nexport default class Scene extends THREE.Scene {\r\n  private aligned: DomObject[] = [];\r\n\r\n  constructor(public camera: THREE.PerspectiveCamera) {\r\n    super();\r\n  }\r\n\r\n  add(object: THREE.Object3D, domElement: Element): this;\r\n  add(...objects: THREE.Object3D[]): this;\r\n  add(...args: any[]): this {\r\n    if (args.length === 2 && args[1] instanceof Element) {\r\n      const [object, el] = args as [THREE.Object3D, Element];\r\n      const domObj = new DomObject(object, el, this.camera);\r\n      this.aligned.push(domObj);\r\n      super.add(object);\r\n      return this;\r\n    }\r\n    super.add(...(args as THREE.Object3D[]));\r\n    return this;\r\n  }\r\n\r\n  update() {\r\n    this.aligned.forEach((o) => o.update());\r\n  }\r\n}\r\n"]}